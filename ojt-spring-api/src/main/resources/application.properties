spring.application.name=ojt-spring-api
# Application:
spring.main.lazy-initialization=true
server.port=8082
spring.threads.virtual.enabled=true

# Datasource
# spring.datasource.url=jdbc:postgresql://ep-wandering-fog-71031792-pooler.ap-southeast-1.aws.neon.tech/uit-project-v1?sslmode=require
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# Datasource - JPA's specific config:
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.properties.jakarta.persistence.sharedCache.mode=ALL
spring.data.jpa.repositories.bootstrap-mode=lazy

# Datasource - Hibernate's specific config:
spring.jpa.properties.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.properties.hibernate.jdbc.batch_size=30
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Spring Security with OAuth2:
spring.security.oauth2.client.registration.google.client-id=${OAUTH2_GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH2_GOOGLE_CLIENT_SECRET}

# Logging:
logging.level.web=debug
logging.level.net.ttddyy.dsproxy.listener=debug

# JWT:
jwt.token.secret=${JWT_TOKEN_SECRET}
jwt.refresh-token.secret=${JWT_REFRESH_TOKEN_SECRET}
jwt.secret.expired-time=86400000
jwt.refresh-token.expired-time=2592000000
jwt.password.expired-time=2592000000

# Redis
spring.data.redis.repositories.enabled=true
spring.data.redis.ssl.enabled=true
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}